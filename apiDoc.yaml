swagger: "2.0"
info:
  version: "1.0.0"
  title: myDeben
  description: "API Documentation"
  contact:
    email: "youssuf.radi@deemalab.com"
host: "172.104.209.122:3000"
basePath: "/api"
tags:
- name: "Image"
  description: "Responsible for storing files and retrieving them"
- name: "Auth"
  description: "Used for user to retrieve access token needed for further identification"
- name: "User"
  description: "All APIs related to the user"
- name: "Store"
  description: "All APIs related to the web admin"
schemes:
- "http"
paths:
          
  /file:
    post:
      tags:
      - "Image"
      summary: "Uploads a file to the server"
      description: "Stores the file on the server and returns an ID to fetch file with later"
      operationId: "imageUpload"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "formData"
        name: "file"
        description: "file to upload on server"
        required: true
        type: "file"
      responses:
        201:
          description: "File Uploaded"
          type: "object"
          properties:
            err:
              type: "null"
            url:
              type: "string"
              format: "url"

  /file/{id}:
    get:
      tags:
      - "Image"
      summary: "Retrives file with corresponding ID"
      description: "Fetches file from the server with corresponding ID"
      operationId: "imageFetch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "ID of Image to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "Returns File requested"
        404:
          description: "Not Found"

  /auth/user/signin:
    post:
      tags:
      - "Auth"
      summary: "User Sign In"
      description: "Returns a token for user to be used in further identification"
      operationId: "userSignIn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "2 Scenarios are allowed:
                      - User email and password for sign in
                      - service and id to sign in with"
        required: true
        schema:
          $ref: "#/definitions/SignInService"
      responses:
        200:
          description: "Successfully Logged In"
          type: "object"
          properties:
            detail:
              type: "string" 
            auth:
              type: "boolean"
            token:
              type: "string"
        400:
          description: "Bad request or Required fields not stated"
        401:
          description: "Wrong Username or Password used"
        404:
          description: "Service not found"
        
  /auth/user/signup:
    post:
      tags:
      - "Auth"
      summary: "User Sign Up"
      description: "Creates a new user in the database"
      operationId: "userSignUp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User email, name and password to register"
        required: true
        schema:
          $ref: "#/definitions/SignUp"
      responses:
        200:
          description: "Successfully Signed Up"
          schema:
            $ref: "#/definitions/SuccessService"
        400:
          description: "Required fields not satisfied"
        401:
          description: "Wrong Username or Password used"
        409:
          description: "Email entered not available - already registered -"
        
  /auth/user/signup/{service}/{id}:
    get:
      tags:
      - "Auth"
      summary: "User Sign Up using an external service"
      description: "Creates a new user in the database using an external service"
      operationId: "userSignUpService"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "service"
        description: "Service type used"
        required: true
        type: "string"
        enum:
          - 'facebook'
          - 'gmail'
      - name: "id"
        in: "path"
        description: "User id to register"
        required: true
        type: "string"
      responses:
        200:
          description: "Successfully Signed Up"
          schema:
            $ref: "#/definitions/SuccessService"
        400:
          description: "Required fields not satisfied"
        401:
          description: "Wrong Username or Password used"
        409:
          description: "Email entered not available - already registered -"

  /auth/store/signin:
    post:
      tags:
      - "Auth"
      summary: "Store Sign In"
      description: "Returns a token for store to be used in further identification"
      operationId: "storeSignIn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User email and password for sign in"
        required: true
        schema:
          $ref: "#/definitions/SignIn"
      responses:
        200:
          description: "Successfully Logged In"
          type: "object"
          properties:
            detail:
              type: "string" 
            auth:
              type: "boolean"
            token:
              type: "string"
        400:
          description: "Bad request or Required fields not stated"
        401:
          description: "Wrong Username or Password used"

  /auth/store/signup:
    post:
      tags:
      - "Auth"
      summary: "Store Sign Up"
      description: "Creates a new store in the database"
      operationId: "storeSignUp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Store email, name and password to register"
        required: true
        schema:
          $ref: "#/definitions/SignUp"
      responses:
        200:
          description: "Successfully Signed Up"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Required fields not satisfied"
        401:
          description: "Wrong Username or Password used"
        409:
          description: "Email entered not available - already registered -"

  /auth/reset:
    post:
      tags:
      - "Auth"
      summary: "Resets password"
      description: "Takes a token for reseting password and allows user to enter a new password"
      operationId: "resetPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Reset Token and new Password"
        required: true
        schema:
          type: "object"
          properties:
            token:
              type: "string"
            password:
              type: "string"
      responses:
        200:
          description: "Password reset successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Required fields not satisfied"
        403:
          description: "Token expired"
        404:
          description: "Token is not correct"

  /auth/forget/{model}:
    post:
      tags:
      - "Auth"
      summary: "Forget password"
      description: "Issues a token for user to use in reseting password"
      operationId: "forgetPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Email to reset password"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
              format: "email"
      - name: "model"
        in: "path"
        description: "Whether this is store or user email"
        required: true
        type: "string"
        enum:
        - "user"
        - "store"
      responses:
        200:
          description: "Mail for reset Sent Successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Required fields not satisfied"
        404:
          description: "Model or email not found"

  /user/profile:
    get:
      tags:
      - "User"
      summary: "Returns all user details and orders"
      description: "View Full details:
                    - Email
                    - Name
                    - Checked In store
                    - Orders Total Amount
                    - Order History"
      operationId: "userProfile"
      produces:
      - "application/json"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "Full Profile"
          schema:
            $ref: "#/definitions/Profile"
        400:
          description: "Wrong User token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /user/search:
    get:
      tags:
      - "User"
      summary: "Returns all results starting with provided keywors"
      description: "Allows user to search for Items in store"
      operationId: "userSearch"
      produces:
      - "application/json"
      parameters:
      - name: "keyword"
        in: "query"
        description: "Keyword to search with"
        required: true
        type: "string"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "Full Profile"
          schema:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "number"
                    name:
                      type: "string"
                    price:
                      type: "number"
                    picture:
                      type: "string"
                    store_id:
                      type: "number"
                    description:
                      type: "string"
                    category_id:
                      type: "number"
        400:
          description: "Wrong User token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /user/discover:
    get:
      tags:
      - "User"
      summary: "Returns all gems provided by the store"
      description: "User can see the main services or recommendations by hotel admin"
      operationId: "userDiscover"
      produces:
      - "application/json"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "All gems"
          schema:
            type: "object"
            properties:
              gems:
                type: "array"
                items:
                  $ref: "#/definitions/Gem"
        400:
          description: "Wrong User token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /user/order:
    get:
      tags:
      - "User"
      summary: "Returns all orders made by the user"
      description: "User coulde see history of my orders and track current status "
      operationId: "userOrder"
      produces:
      - "application/json"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "All orders"
          schema:
            type: "object"
            properties:
              oredrs:
                type: "array"
                items:
                  $ref: "#/definitions/Order"
        400:
          description: "Wrong User token Used or Product ID not valid"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
    post:
      tags:
      - "User"
      summary: "User Making Orders"
      description: "User can pick a certain category then menu item and order"
      operationId: "userAddOrder"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Takes order of a user to order"
        required: true
        schema:
          type: "object"
          required:
          - "store_id"
          - "order"
          properties:
            store_id:
              type: "integer"
            order:
              type: "array"
              items:
                type: "object"
                properties:
                  quantity:
                    type: "integer"
                  product_id:
                    type: "integer"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "Ordered Successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Wrong User token Used or store doesnot exist"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /user/checkin:
    post:
      tags:
      - "User"
      summary: "User Check in to store using QR"
      description: "Travellers can scan QR Code once he arrives at hotel so that 
                he can checkin the hotel services on Deben
                Output from the QR code is sent to the server for checkin"
      operationId: "checkInQR"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Checks user into a certain store with id and name"
        required: true
        schema:
          type: "object"
          required:
          - "token"
          properties:
            token:
              type: "string"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "Checked In Successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Wrong User token Used or Already checked_in"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Store doesnot exist"

  /user/service:
    get:
      tags:
      - "User"
      summary: "Retrives all store services with their corresponding providers for current checked in store"
      description: "Shows all available services with their corresponding providers for the store user is currently checked in with all details"
      operationId: "userShowServicesAndProviders"
      produces:
      - "application/json"
      parameters:
      - name: "group"
        in: "query"
        description: "Grouping field to group fields with"
        required: false
        type: "string"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "Array of Services and Providers"
          schema:
            type: "object"
            properties:
              categories:
                type: "array"
                items:
                  $ref: "#/definitions/ServiceAndProvider"
        400:
          description: "Wrong User token Used / User didnot previously check in"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /user/category:
    get:
      tags:
      - "User"
      summary: "Retrives all store categories for current checked in store"
      description: "Shows all available categories for the store user is currently checked in with all details"
      operationId: "userShowCategories"
      produces:
      - "application/json"
      parameters:
      - name: "providerId"
        in: "query"
        description: "Provider Id to retreive categories inside"
        required: true
        type: "string"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "Array of categories"
          schema:
            type: "object"
            properties:
              categories:
                type: "array"
                items:
                  $ref: "#/definitions/Category"
        400:
          description: "Wrong User token Used / User didnot previously check in"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Provider ID not found"

  /user/product:
    get:
      tags:
      - "User"
      summary: "Retrives all store category products for current checked in store"
      description: "Shows all available category products for the store user is currently checked in with all details"
      operationId: "userShowProducts"
      produces:
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "query"
        description: "Category Id to retreive products inside"
        required: true
        type: "string"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "Array of Products"
          schema:
            type: "object"
            properties:
              products:
                type: "array"
                items:
                  $ref: "#/definitions/Product"
        400:
          description: "Wrong User token Used / User didnot previously check in"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Category Id not found"

  /store/generate/code/{ref}/{date}:
    get:
      tags:
      - "Store"
      summary: "Returns QR code as a PNG for hotel admin representing his store"
      description: "A hotel manager generates QR code for users to scan"
      operationId: "storeQR"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "ref"
        description: "Refrence number to track user with latter"
        required: true
        type: "string"
      - in: "path"
        name: "date"
        description: "Checkout Date of the user"
        required: true
        type: "string"
        format: "date"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "QR image string base64"
          schema:
            type: "object"
            properties:
              code:
                type: "string"
                format: "base64"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /store/generate/token/{ref}/{date}:
    get:
      tags:
      - "Store"
      summary: "Returns Token for hotel admin representing his store and a reference number"
      description: "A hotel manager generates token for users to enter and check in with"
      operationId: "storeToken"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "ref"
        description: "Refrence number to track user with latter"
        required: true
        type: "string"
      - in: "path"
        name: "date"
        description: "Checkout Date of the user"
        required: true
        type: "date"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Token for user to check in"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /store/service:
    get:
      tags:
      - "Store"
      summary: "Retrives all store services"
      description: "Shows all available services for the store with all details"
      operationId: "storeShowServices"
      produces:
      - "application/json"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Array of services"
          schema:
            type: "object"
            properties:
              services:
                type: "array"
                items:
                  $ref: "#/definitions/Service"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
    post:
      tags:
      - "Store"
      summary: "Adds a service to a store"
      description: "Adds a new service to the store with all it's details"
      operationId: "storeAddServices"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Required Fields for a services"
        required: true
        schema:
          type: "object"
          required:
          - "name"
          properties:
            name:
              type: "string" 
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Service Added Successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Wrong User token Used or store doesnot exist"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /store/service/{serviceId}:
    patch:
      tags:
      - "Store"
      summary: "Edits service details in a store"
      description: "Edits service in the store with all it's details"
      operationId: "storeEditServices"
      produces:
      - "application/json"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "Service id to edit"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Optional Fields to edit a service"
        required: true
        schema:
          type: "object"
          properties:
            name:
              type: "string" 
            picture:
              type: "string"
            description:
              type: "string"
      security:
        - x-access-token: [store]
      responses:
        204:
          description: "Service Edited Successfully"
        400:
          description: "Wrong Store token Used "
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Service doesnot exist"
    delete:
      tags:
      - "Store"
      summary: "Deletes a service in a store"
      operationId: "storeDeleteServices"
      produces:
      - "application/json"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "Service id to delete"
        required: true
        type: "integer"
        format: "int64"
      security:
        - x-access-token: [store]
      responses:
        204:
          description: "Service Deleted Successfully"
        400:
          description: "Wrong Store token Used "
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Service doesnot exist"

  /store/provider/all:
    get:
      tags:
      - "Store"
      summary: "Retrives all store providers"
      description: "Shows all available service providers for the store with all details"
      operationId: "storeAllProviders"
      produces:
      - "application/json"
      parameters:
      - name: "group"
        in: "query"
        description: "Grouping field to group fields with"
        required: false
        type: "string"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "Array of Services and Providers"
          schema:
            type: "object"
            properties:
              categories:
                type: "array"
                items:
                  $ref: "#/definitions/Provider"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"


  /store/provider:
    get:
      tags:
      - "Store"
      summary: "Retrives all store service providers"
      description: "Shows all available service providers for the store with all details"
      operationId: "storeShowProviderss"
      produces:
      - "application/json"
      parameters:
      - name: "serviceId"
        in: "query"
        description: "Service Id to retreive providers inside"
        required: true
        type: "string"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Array of Providers"
          schema:
            type: "object"
            properties:
              providers:
                type: "array"
                items:
                  $ref: "#/definitions/Provider"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Provider Id not found"
    post:
      tags:
      - "Store"
      summary: "Adds a Provider to a Service in the store"
      description: "Adds a new Provider to the service in the store with all it's details"
      operationId: "storeAddProviders"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Required Fields for a Provider"
        required: true
        schema:
          type: "object"
          required:
          - "name"
          - "price"
          - "service_id"          
          properties:
            name:
              type: "string" 
            picture:
              type: "string"
            service_id:
              type: "integer"
            gem:
              type: "boolean"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Provider Added Successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Service Id not found"

  /store/provider/{providerId}:
    patch:
      tags:
      - "Store"
      summary: "Edits Provider details in a store"
      description: "Edits Provider in the store with all it's details"
      operationId: "storeEditProviders"
      produces:
      - "application/json"
      parameters:
      - name: "providerId"
        in: "path"
        description: "Provider id to edit"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Required Fields for a Provider"
        required: true
        schema:
          type: "object"
          properties:
            name:
              type: "string" 
            picture:
              type: "string"
            gem:
              type: "boolean"
      security:
        - x-access-token: [store]
      responses:
        204:
          description: "Provider Edited Successfully"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Provider doesnot exist"
    delete:
      tags:
      - "Store"
      summary: "Deletes a Provider in a store"
      operationId: "storeDeleteProvider"
      produces:
      - "application/json"
      parameters:
      - name: "providerId"
        in: "path"
        description: "Provider id to delete"
        required: true
        type: "integer"
        format: "int64"
      security:
        - x-access-token: [store]
      responses:
        204:
          description: "Provider Deleted Successfully"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Provider doesnot exist"

  /store/category:
    get:
      tags:
      - "Store"
      summary: "Retrives all store categories"
      description: "Shows all available categories for the store with all details"
      operationId: "storeShowCategories"
      produces:
      - "application/json"
      parameters:
      - name: "providerId"
        in: "query"
        description: "Provider Id to retreive categories inside"
        required: true
        type: "string"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Array of categories"
          schema:
            type: "object"
            properties:
              categories:
                type: "array"
                items:
                  $ref: "#/definitions/Category"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
    post:
      tags:
      - "Store"
      summary: "Adds a category to a store"
      description: "Adds a new category to the store with all it's details"
      operationId: "storeAddCategories"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Required Fields for a category"
        required: true
        schema:
          type: "object"
          required:
          - "name"
          - "provider_id"
          properties:
            name:
              type: "string" 
            picture:
              type: "string"
            description:
              type: "string"
            provider_id:
              type: "number"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Catgory Added Successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Wrong User token Used or store doesnot exist"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /store/category/{categoryId}:
    patch:
      tags:
      - "Store"
      summary: "Edits category details in a store"
      description: "Edits category in the store with all it's details"
      operationId: "storeEditCategories"
      produces:
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "Category id to edit"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Optional Fields to edit a category"
        required: true
        schema:
          type: "object"
          properties:
            name:
              type: "string" 
            picture:
              type: "string"
            description:
              type: "string"
      security:
        - x-access-token: [store]
      responses:
        204:
          description: "Catgory Edited Successfully"
        400:
          description: "Wrong Store token Used "
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Category doesnot exist"
    delete:
      tags:
      - "Store"
      summary: "Deletes a category in a store"
      operationId: "storeDeleteCategories"
      produces:
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "Category id to delete"
        required: true
        type: "integer"
        format: "int64"
      security:
        - x-access-token: [store]
      responses:
        204:
          description: "Catgory Deleted Successfully"
        400:
          description: "Wrong Store token Used "
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Category doesnot exist"

  /store/product:
    get:
      tags:
      - "Store"
      summary: "Retrives all store category products"
      description: "Shows all available category products for the store with all details"
      operationId: "storeShowProducts"
      produces:
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "query"
        description: "Category Id to retreive products inside"
        required: true
        type: "string"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Array of Products"
          schema:
            type: "object"
            properties:
              products:
                type: "array"
                items:
                  $ref: "#/definitions/Product"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Category Id not found"
    post:
      tags:
      - "Store"
      summary: "Adds a Product to a Category in the store"
      description: "Adds a new product to the category in the store with all it's details"
      operationId: "storeAddProducts"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Required Fields for a Product"
        required: true
        schema:
          type: "object"
          required:
          - "name"
          - "price"
          - "category_id"          
          properties:
            name:
              type: "string" 
            picture:
              type: "string"
            description:
              type: "string"
            category_id:
              type: "integer"
            price:
              type: "integer"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Product Added Successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Category Id not found"

  /store/product/{productId}:
    patch:
      tags:
      - "Store"
      summary: "Edits Product details in a store"
      description: "Edits Product in the store with all it's details"
      operationId: "storeEditProducts"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "Product id to edit"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Required Fields for a Product"
        required: true
        schema:
          type: "object"
          properties:
            name:
              type: "string" 
            picture:
              type: "string"
            description:
              type: "string"
            price:
              type: "integer"
      security:
        - x-access-token: [store]
      responses:
        204:
          description: "Product Edited Successfully"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Product doesnot exist"
    delete:
      tags:
      - "Store"
      summary: "Deletes a Product in a store"
      operationId: "storeDeleteProduct"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "integer"
        format: "int64"
      security:
        - x-access-token: [store]
      responses:
        204:
          description: "Product Deleted Successfully"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "Product doesnot exist"

  /store/order/current:
    get:
      tags:
      - "Store"
      summary: "Returns current orders Only made to the store"
      description: "Store could see current orders that need to be servered to users or cancel them"
      operationId: "storeCurrentOrders"
      produces:
      - "application/json"
      parameters:
      - name: "sort"
        in: "query"
        description: "Sort parameter to return sorted results could be 'user', 'category or 'date"
        required: false
        type: "string"
        enum:
        - "user"
        - "category"
        - "date"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Current orders"
          schema:
            type: "object"
            properties:
              oredrs:
                type: "array"
                items:
                  $ref: "#/definitions/Order"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /store/order:
    get:
      tags:
      - "Store"
      summary: "Returns all orders made to the store"
      description: "Store could see all the order history by all the users"
      operationId: "storeOrders"
      produces:
      - "application/json"
      parameters:
      - name: "sort"
        in: "query"
        description: "Sort parameter to return sorted results could be 'user', 'category or 'date"
        required: false
        type: "string"
        enum:
        - "user"
        - "category"
        - "date"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "All orders"
          schema:
            type: "object"
            properties:
              oredrs:
                type: "array"
                items:
                  $ref: "#/definitions/Order"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /store/order/serve/{orderId}:
    get:
      tags:
      - "Store"
      summary: "Serves a pending order"
      description: "Store can serve a pending order to the user"
      operationId: "storeServeOrder"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "Order Id to serve"
        required: true
        type: "string"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Order Served"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied / Order already served / Order already cancelled / Old order"

  /store/order/cancel/{orderId}:
    get:
      tags:
      - "Store"
      summary: "Cancels a pending order"
      description: "Store could cancel pending orders"
      operationId: "storeCancelOrder"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "Order Id to cancel"
        required: true
        type: "string"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Order Cancelled"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied / Order already served / Order already cancelled / Old order"

  /store/users:
    get:
      tags:
      - "Store"
      summary: "Returns list of Checked in users in stores"
      operationId: "storeCheckedInUsers"
      produces:
      - "application/json"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "Users Checked In Store"
          schema:
          type: "object"
          properties:
            users:
              type: "array"
              items:
                type: "object"
                properties:
                  id:
                    type: "integer"
                  email:
                    type: "string" 
                    format: "email"
                  name:
                    type: "string"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

  /store/user/{userId}:
    get:
      tags:
      - "Store"
      summary: "Returns user total orders"
      description: "View All orders and the total"
      parameters:
      - in: "path"
        name: "userId"
        description: "ID of User to get details"
        required: true
        type: "string"
      operationId: "userReport"
      produces:
      - "application/json"
      security:
        - x-access-token: [user]
      responses:
        200:
          description: "Full Profile"
          schema:
            $ref: "#/definitions/StoreUserReport"
        400:
          description: "Wrong User token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"
        404:
          description: "User Not found"

  /store/checkout:
    get:
      tags:
      - "Store"
      summary: "Checks out user from a store"
      operationId: "storeCheckOut"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "User Id to check out"
        required: true
        type: "string"
      security:
        - x-access-token: [store]
      responses:
        200:
          description: "User Checked Out Successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Wrong Store token Used"
        401:
          description: "Token expired or Malformed"
        403:
          description: "Permission Denied"

definitions:
  Success:
    type: "object"
    properties:
      detail:
        type: "string" 
      success:
        type: "boolean"
  SuccessService:
    type: "object"
    properties:
      detail:
        type: "string" 
      success:
        type: "boolean"
      token:
        type: "string"
  SignIn:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
        format: "password"
  SignInService:
    type: "object"
    required:
    - "email"
    - "password"
    - "id"
    - "service"
    properties:
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
        format: "password"
      id:
        type: "string"
      service:
        type: "string"
        enum:
          - 'facebook'
          - 'gmail'
  SignUp:
    type: "object"
    required:
    - "email"
    - "name"
    - "password"
    properties:
      email:
        type: "string"
        format: "email"
      name:
        type: "string"
      password:
        type: "string"
        format: "password"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      email:
        type: "string" 
        format: "email"
      name:
        type: "string"
      checkin_store_name:
        type: "string" 
      checkin_store_id:
        type: "integer"
      checkout_date:
        type: "string"
        format: "date"
  Order:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string" 
      picture:
        type: "string"
      description:
        type: "string"
      price:
        type: "integer"
      total_price:
        type: "integer"
      quantity:
        type: "integer"
      store_id:
        type: "integer"
      user_id:
        type: "integer"
      checked_out:
        type: "boolean"
      served:
        type: "boolean"
  Profile:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/User"
      total:
        type: "integer"
      orders:
        type: "array"
        items:
          $ref: "#/definitions/Order"
  StoreUserReport:
    type: "object"
    properties:
      total:
        type: "integer"
      orders:
        type: "array"
        items:       
          type: "object"
          properties:
            id:
              type: "string"
            name:
              type: "string" 
            price:
              type: "integer"
            total_price:
              type: "integer"
            quantity:
              type: "integer"
            checked_out:
              type: "boolean"
            served:
              type: "boolean"
            cancelled:
              type: "boolean"
  Gem:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string" 
      gem:
        type: "boolean"
      picture:
        type: "string"
      store_id:
        type: "integer"
      service_id:
        type: "integer"
  Service:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string" 
  ServiceAndProvider:
    type: "object"
    properties:
      services:
        type: "object"
        properties:
          ${GROUPING_PARAMETER}:
            type: "array"
            items:
              type: "object"
              properties:
                service_id:
                  type: "number"
                service_name:
                  type: "string"
                provider_id:
                  type: "number"
                provide_name:
                  type: "string"
                provider_picture:
                  type: "string" 
  Provider:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string" 
      picture:
        type: "string"
      gem:
        type: "boolean"
  Category:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string" 
      picture:
        type: "string"
      description:
        type: "string"
  Product:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string" 
      picture:
        type: "string"
      description:
        type: "string"
      price:
        type: "integer"

securityDefinitions:
  x-access-token:
    type: "apiKey"
    in: header
    name: "x-access-token"
                